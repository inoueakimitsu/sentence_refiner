#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.5 on Tue Jul 27 17:14:43 2021
#

import wx

import json
import os
import subprocess
from googletrans import Translator

# pip uninstall googletrans
# pip install git+https://github.com/alainrouillon/py-googletrans@feature/enhance-use-of-direct-api


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

# singleton class
class SentenceRefinerController:
    def __init__(self, settings_file_path="./settings.json"):
        self.settings_file_path = settings_file_path
        if not os.path.exists(self.settings_file_path):
            self.__generate_settings()

        with open(self.settings_file_path) as f:
            self.settings = json.load(f)
        
        # Google 翻訳の初期化を行います。
        self.google_translator = Translator(service_urls=['translate.googleapis.com'])

    def write_to_setting_file(self):
        with open(self.settings_file_path, 'w') as f:
            json.dump(self.settings, f)
    def analyze_text(self, text) -> str:
        # 参考: https://qiita.com/YuukiMiyoshi/items/6ce77bf402a29a99f1bf
        text_fullwidth = text.translate(str.maketrans({chr(0x0021 + i): chr(0xFF01 + i) for i in range(94)}))
        # 半角スペースの削除
        text_fullwidth = text_fullwidth.replace(" ", "")
        # 両端の空白を削除
        text_fullwidth = text_fullwidth.strip()
        print(f"```{text_fullwidth}```")
        knp_result: str = subprocess.check_output(
            f"\"{self.settings['juman_exe_path']}\" | \"{self.settings['knp_exe_path']}\"",
            input=text_fullwidth, encoding='cp932', shell=True)
        
        # 翻訳も追加します。
        while True:
            try:
                google_translate_result: str = self.google_translator.translate(text, dest="en").text
                break
            except Exception as e:
                google_translate_result: str = "Translator Error"
        
        return knp_result + "\n\n" + "翻訳結果:\n" + google_translate_result

    def get_juman_exe_path(self):
        return self.settings['juman_exe_path']
    def set_juman_exe_path(self, new_path):
        self.settings['juman_exe_path'] = new_path
        self.write_to_setting_file()
    def get_knp_exe_path(self):
        return self.settings['knp_exe_path']
    def set_knp_exe_path(self, new_path):
        self.settings['knp_exe_path'] = new_path
        self.write_to_setting_file()
    def __generate_settings(self) -> bool:
        with open(self.settings_file_path, 'w') as f:
            json.dump(
                {
                    "juman_exe_path": "C:\\Program Files\\juman\\juman.exe",
                    "knp_exe_path": "C:\\Program Files\\knp\\knp.exe",
                }, f)
        return True

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((531, 541))
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"設定", "")
        self.Bind(wx.EVT_MENU, self.menu_item_click1, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.text_ctrl_user_input = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.button_analyze = wx.Button(self.panel_1, wx.ID_ANY, u"解析実行")
        self.text_ctrl_analysis_output = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_MULTILINE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_click_run_analysis, self.button_analyze)
        # end wxGlade

        # コントローラーを作成します。
        self.controller = SentenceRefinerController("./settings.json")

        # 設定ダイアログ
        self.setting_dialog = AppSettingDialog(parent=self, id=wx.ID_ANY, controller=self.controller)
        self.setting_dialog.controller = self.controller

        # 出力の書体を変更
        font = wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, False, 'MS Gothic')
        self.text_ctrl_analysis_output.SetFont(font)

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("SentenceRefiner")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, u"解析結果"), wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, u"入力文"), wx.HORIZONTAL)
        sizer_10.Add(self.text_ctrl_user_input, 1, wx.EXPAND, 0)
        sizer_12.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_8.Add(self.button_analyze, 0, 0, 0)
        sizer_12.Add(sizer_8, 0, wx.EXPAND, 0)
        sizer_11.Add(self.text_ctrl_analysis_output, 5, wx.EXPAND, 0)
        sizer_12.Add(sizer_11, 5, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_12)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def menu_item_click1(self, event):  # wxGlade: MainFrame.<event_handler>
        self.setting_dialog.Show()

    def on_click_run_analysis(self, event):  # wxGlade: MainFrame.<event_handler>
        analysis_result: str = self.controller.analyze_text(self.text_ctrl_user_input.GetValue())
        self.text_ctrl_analysis_output.SetValue(analysis_result)

# end of class MainFrame

class AppSettingDialog(wx.Dialog):
    def __init__(self, controller: SentenceRefinerController, *args, **kwds):
        # begin wxGlade: AppSettingDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((594, 352))
        self.setting_notebook = wx.Notebook(self, wx.ID_ANY)
        self.panel_basic = wx.Panel(self.setting_notebook, wx.ID_ANY)
        self.pane_nlp = wx.Panel(self.setting_notebook, wx.ID_ANY)
        self.text_ctrl_knp_exe_path = wx.TextCtrl(self.pane_nlp, wx.ID_ANY, "")
        self.text_ctrl_juman_exe_path = wx.TextCtrl(self.pane_nlp, wx.ID_ANY, "")
        self.button_save_settings = wx.Button(self, wx.ID_ANY, "OK")
        self.button_setting_cancel = wx.Button(self, wx.ID_ANY, u"キャンセル")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_click_button_save_settings, self.button_save_settings)
        self.Bind(wx.EVT_BUTTON, self.on_click_button_setting_cancel, self.button_setting_cancel)
        # end wxGlade

        # コントローラを受け取ります。
        self.controller = controller
        # 設定を読み込みます。
        self.text_ctrl_juman_exe_path.SetValue(self.controller.get_juman_exe_path())
        self.text_ctrl_knp_exe_path.SetValue(self.controller.get_knp_exe_path())

    def __set_properties(self):
        # begin wxGlade: AppSettingDialog.__set_properties
        self.SetTitle("Settings")
        self.SetSize((594, 352))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AppSettingDialog.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.pane_nlp, wx.ID_ANY, "JUMAN"), wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self.pane_nlp, wx.ID_ANY, "KNP"), wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        label_2 = wx.StaticText(self.pane_nlp, wx.ID_ANY, u"knp.exe のパス")
        sizer_7.Add(label_2, 0, 0, 0)
        sizer_7.Add(self.text_ctrl_knp_exe_path, 1, 0, 0)
        sizer_5.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_5, 1, wx.EXPAND, 0)
        label_1 = wx.StaticText(self.pane_nlp, wx.ID_ANY, u"juman.exe のパス")
        sizer_6.Add(label_1, 0, 0, 0)
        sizer_6.Add(self.text_ctrl_juman_exe_path, 1, 0, 0)
        sizer_4.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
        self.pane_nlp.SetSizer(sizer_3)
        self.setting_notebook.AddPage(self.panel_basic, u"基本設定")
        self.setting_notebook.AddPage(self.pane_nlp, u"自然言語処理")
        sizer_2.Add(self.setting_notebook, 1, wx.EXPAND, 0)
        sizer_9.Add(self.button_save_settings, 0, 0, 0)
        sizer_9.Add(self.button_setting_cancel, 0, 0, 0)
        sizer_2.Add(sizer_9, 0, wx.ALIGN_RIGHT, 0)
        self.SetSizer(sizer_2)
        self.Layout()
        # end wxGlade

    def on_click_button_save_settings(self, event):  # wxGlade: AppSettingDialog.<event_handler>
        self.controller.set_juman_exe_path(self.text_ctrl_juman_exe_path.GetValue())
        self.controller.set_knp_exe_path(self.text_ctrl_knp_exe_path.GetValue())
        self.Hide()
    def on_click_button_setting_cancel(self, event):  # wxGlade: AppSettingDialog.<event_handler>
        self.Hide()
# end of class AppSettingDialog

class MyApp(wx.App):
    def OnInit(self):
        self.mainFrame = MainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.mainFrame)
        self.mainFrame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
